
# Cette application web permet √† un utilisateur de saisir un texte libre et d‚Äôobtenir en temps r√©el la pr√©diction du sentiment (positif ou n√©gatif) associ√©e √† ce texte. Elle utilise un mod√®le de classification fine-tun√© sur des donn√©es multilingues (fran√ßais et anglais).

# Fonctionnalit√©s principales

# - **Nettoyage du texte** : avant la pr√©diction, le texte est nettoy√© pour retirer balises HTML, caract√®res sp√©ciaux et espaces superflus, puis converti en minuscules pour standardiser l‚Äôentr√©e.
# - **Chargement optimis√© du mod√®le** : le mod√®le et le tokenizer sont charg√©s une seule fois gr√¢ce √† la mise en cache (`@st.cache_resource`), ce qui acc√©l√®re les appels suivants.
# - **Interface intuitive** : un champ de saisie large permet d‚Äôentrer un texte, et un bouton d√©clenche la pr√©diction.
# - **Affichage color√© du r√©sultat** :
#   - Le sentiment positif est affich√© dans une bo√Æte verte avec une ic√¥ne souriante.
#   - Le sentiment n√©gatif s‚Äôaffiche dans une bo√Æte rouge avec une ic√¥ne triste.
# - **Confiance associ√©e** : la probabilit√© (score de confiance) de la pr√©diction est √©galement affich√©e pour informer l‚Äôutilisateur de la certitude du mod√®le.

# Processus utilisateur

# 1. L‚Äôutilisateur saisit un texte dans la zone pr√©vue.
# 2. En cliquant sur ‚ÄúPr√©dire le sentiment‚Äù, le texte est nettoy√© puis tokenis√©.
# 3. Le mod√®le calcule la pr√©diction et renvoie la classe (positif/n√©gatif) et la confiance.
# 4. Le r√©sultat est affich√© dans une zone color√©e correspondant au sentiment d√©tect√©.

import streamlit as st
from transformers import AutoModelForSequenceClassification, AutoTokenizer
import torch
from torch.nn import functional as F
import re

def clean_text(t):
    t = re.sub(r'<br\s*/?>', ' ', t)
    t = re.sub(r'[^a-zA-Z0-9,.!?\'" ]+', ' ', t)
    t = re.sub(r'\s+', ' ', t)
    return t.lower().strip()

@st.cache_resource
def load_model():
    model_dir = "FATIMA-ZAHRA-Z/my_model"
    model = AutoModelForSequenceClassification.from_pretrained(model_dir)
    tokenizer = AutoTokenizer.from_pretrained(model_dir)
    model.eval()
    return model, tokenizer

model, tokenizer = load_model()

# üé® Style CSS personnalis√©
st.markdown("""
<style>
h1 {
    color: #4B0082;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    text-align: center;
    margin-bottom: 30px;
}
.stButton>button {
    background-color: #6A5ACD;
    color: white;
    font-weight: bold;
    border-radius: 8px;
    padding: 10px 20px;
    border: none;
    transition: background-color 0.3s ease;
}

.stTextArea>div>textarea {
    font-size: 18px;
    padding: 12px;
    border-radius: 8px;
    border: 2px solid #6A5ACD;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}
.result-box {
    padding: 15px;
    margin-top: 20px;
    border-radius: 8px;
    font-size: 18px;
    color: white;
    font-weight: bold;
}
.positive {
    background-color: #2E8B57;  /* Vert */
}
.negative {
    background-color: #B22222;  /* Rouge */
}
</style>
""", unsafe_allow_html=True)

st.title("üí¨ Analyse de sentiments")

st.markdown("<h3 style='font-size: 24px; color: #4B0082;'>Entrer un texte :</h3>", unsafe_allow_html=True)
text = st.text_area("", height=150)

if st.button("Pr√©dire le sentiment") and text:
    cleaned = clean_text(text)
    inputs = tokenizer(cleaned, return_tensors="pt", truncation=True, padding=True, max_length=256)

    with torch.no_grad():
        outputs = model(**inputs)
        probs = F.softmax(outputs.logits, dim=-1)
        predicted_class = torch.argmax(probs, dim=-1).item()
        confidence = probs[0][predicted_class].item()

    labels_map = {0: "N√©gatif üòû", 1: "Positif üòÑ"}

    if predicted_class == 1:
        st.markdown(
            f"<div class='result-box positive'> Sentiment pr√©dit : {labels_map[predicted_class]}<br>Confiance : {confidence:.2f}</div>",
            unsafe_allow_html=True
        )
    else:
        st.markdown(
            f"<div class='result-box negative'> Sentiment pr√©dit : {labels_map[predicted_class]}<br>Confiance : {confidence:.2f}</div>",
            unsafe_allow_html=True
        )
